"use strict";document.addEventListener("DOMContentLoaded",(function(){try{var e=function(e){e.classList.remove("modal--active"),o.style.overflowY="",function(e){e.removeEventListener("keydown",t),e.removeEventListener("click",n)}(e)},t=function(t){var n=t.currentTarget;"Escape"===t.key&&e(n)},n=function(t){t.currentTarget.querySelector(".modal__content").contains(t.target)||e(t.currentTarget)},r=document.querySelectorAll("[data-modal]"),o=document.querySelector("body"),a=document.querySelectorAll("[data-modal-close]");r.forEach((function(e){e.addEventListener("click",(function(e){e.preventDefault();var r=e.target.closest("[data-modal]").getAttribute("data-modal"),a=document.getElementById(r);a&&(a.classList.add("modal--active"),o.style.overflow="hidden",function(e){e.addEventListener("keydown",t),e.addEventListener("click",n)}(a))}))})),a.forEach((function(t){t.addEventListener("click",(function(t){var n=t.target.closest(".modal");n&&e(n)}))}))}catch(e){}var c=document.querySelector("#burger"),d=document.querySelector(".header-burger__content");c.addEventListener("click",(function(){d.classList.toggle("active")}));var l=document.documentElement,i=getComputedStyle(l).getPropertyValue("--marquee-elements-displayed");document.querySelectorAll(".logos__stroke").forEach((function(e){l.style.setProperty("--marquee-elements",e.children.length);for(var t=0;t<i;t++)e.appendChild(e.children[t].cloneNode(!0))}));new Swiper(".faq__swiper",{navigation:{nextEl:".faq__header .swiper-button-next",prevEl:".faq__header .swiper-button-prev"},breakpoints:{320:{spaceBetween:20},640:{spaceBetween:40}},slidesPerView:"auto"});(new WOW).init()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYnRuIiwiZSIsInByZXZlbnREZWZhdWx0IiwiYm9keSIsInN0eWxlIiwibW9kYWxJZCIsInRhcmdldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxdWVyeVNlbGVjdG9yIiwib25Nb2RhbEtleURvd24iLCJidG5DbG9zZSIsInJlbW92ZU1vZGFsRXZlbnRMaXN0ZW5lcnMiLCJnZXRFbGVtZW50QnlJZCIsIm92ZXJmbG93IiwiYWRkTW9kYWxFdmVudExpc3RlbmVycyIsImtleSIsImNsb3NlTW9kYWwiLCJtb2RhbCIsImNsb3NlIiwiY29udGFpbnMiLCJidG5zIiwiZm9yRWFjaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbG9zZXN0IiwiZ2V0QXR0cmlidXRlIiwib25Nb2RhbENsaWNrIiwiY2xhc3NMaXN0IiwiYWRkIiwiY3VycmVudFRhcmdldCIsImVycm9yIiwiYnVyZ2VyTWVudSIsInRvZ2dsZSIsImJ1cmdlckJ0biIsInJvb3QiLCJkb2N1bWVudEVsZW1lbnQiLCJtYXJxdWVlRWxlbWVudHNEaXNwbGF5ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwic2V0UHJvcGVydHkiLCJpIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm1hcnF1ZWUiLCJjaGlsZHJlbiIsImxlbmd0aCIsImFwcGVuZENoaWxkIiwiY2xvbmVOb2RlIiwibmV4dEVsIiwiU3dpcGVyIiwiYnJlYWtwb2ludHMiLCJzcGFjZUJldHdlZW4iLCJXT1ciLCJpbml0Il0sIm1hcHBpbmdzIjoiYUFDQUEsU0FBU0MsaUJBQWlCLG9CQUFvQixXQUUxQyxJQUFJLElBTVFBLEVBQUpDLFNBQUlELEdBQ0FFLEVBQUVDLFVBQUFBLE9BQUYsaUJBQ0FDLEVBQUFDLE1BQU1DLFVBQVlDLEdBUDFCLFNBQXNCQyxHQUNoQkosRUFBQUEsb0JBQWdCSyxVQUF0QkMsR0FDTUMsRUFBQUEsb0JBQW9CSCxRQUFBQSxFQWdDekIsQ0ExQk9JLENBQXVCQyxFQUN2QixFQUVJVCxFQUFBQSxTQUFXVSxHQUNYQyxJQUFBQSxFQUFBQSxFQUFBQSxjQUNILFdBQUFiLEVBQUFjLEtBUkxDLEVBQUFDLEVBMENILEVBN0JHQyxFQUFBQSxTQUFNbkIsR0FDY08sRUFBQUEsY0FBZUUsY0FBL0IsbUJBQ1dXLFNBQUFsQixFQUFBSyxTQUNQVSxFQUFBQSxFQUFBQSxjQUVQLEVBeEJMSSxFQUFBdEIsU0FBQVMsaUJBQUEsZ0JBMkJTTyxFQUFBQSxTQUFBQSxjQUFULFFBQ0lHLEVBQU1sQixTQUFOUSxpQkFBa0NFLHNCQUVyQ1csRUE5QkRDLFNBQUEsU0FBQXJCLEdBTUlBLEVBQUlELGlCQUFpQixTQUFTLFNBQUFFLEdBMEJ6QlUsRUFBQUEsaUJBQ0xNLElBQU1LLEVBQUFBLEVBQUFBLE9BQW9CQyxRQUFXZCxnQkFBckNlLGFBQUEsY0FDTUYsRUFBQUEsU0FBb0JWLGVBQVNhLEdBbEN2Q1IsSUFXWUEsRUFBTVMsVUFBVUMsSUFBSSxpQkEwQnZCWCxFQUFUWixNQUFBUyxTQUFTRyxTQWVMLFNBQTJCZixHQUN2QmUsRUFBQUEsaUJBQWFZLFVBQWJuQixHQUNIUSxFQUFBbEIsaUJBQUEsUUFBQTBCLEVBdERMLENBc0NVQyxDQUFpQlQsR0FFdkJOLEdBeENKLElBQUFELEVBMkNTRCxTQUFBQSxTQUFBQSxHQUNMUyxFQUFNRCxpQkFBVVcsU0FBaEIsU0FBQTNCLEdBQ0lBLElBQUFnQixFQUFVaEIsRUFBQUssT0FBVWlCLFFBQUEsVUFDcEJQLEdBQ0hBLEVBQUFDLEVBdkJBLEdBeEJMLEdBMERILENBQUMsTUFBT1ksR0FLVCxDQUlJQyxJQUFBQSxFQUFXSixTQUFVSyxjQUFPLFdBRGhDRCxFQUFBaEMsU0FBQVUsY0FBQSwyQkFJQXdCLEVBQU1DLGlCQUFnQkMsU0FBdEIsV0FDTUMsRUFBQUEsVUFBQUEsT0FBMkJDLFNBQ2pDLElBRUlILElBQUFBLEVBQUs3QixTQUFNaUMsZ0JBQ1hGLEVBQW9CQSxpQkFBMEJHLEdBQUtDLGlCQUFBLGdDQUMvQ3pDLFNBQUFTLGlCQUFBLGtCQUNBYyxTQUFBLFNBQUFtQixHQUhKUCxFQUFLN0IsTUFBTWlDLFlBQVkscUJBQXNCRyxFQUFRQyxTQUFTQyxRQUsxRCxJQUFBLElBQUFKLEVBQUEsRUFBQUEsRUFBQUgsRUFBQUcsSUFDQUUsRUFBUUcsWUFBWUgsRUFBUUMsU0FBU0gsR0FBR00sV0FBVSxHQU9sREMsSUFGNkIsSUFBQUMsT0FBQSxlQUFBLENBS2pDQyxXQUFBQSxDQUNJRixPQUFLLG1DQUNERyxPQUFBQSxvQ0FEQ0QsWUFESSxDQUtULElBQUssQ0FDREMsYUFBYyxJQVhXLElBQUEsQ0FlakNBLGFBQUEsS0FPQUMsY0FBSixVQUFBLElBQUlBLEtBQU1DLE1BQ2IiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgYnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1vZGFsXScpO1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcbiAgICAgICAgY29uc3QgYnRuQ2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tb2RhbC1jbG9zZV0nKTtcclxuXHJcbiAgICAgICAgYnRucy5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWxJZCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLW1vZGFsXScpLmdldEF0dHJpYnV0ZSgnZGF0YS1tb2RhbCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtb2RhbElkKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLmNsYXNzTGlzdC5hZGQoJ21vZGFsLS1hY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkTW9kYWxFdmVudExpc3RlbmVycyhtb2RhbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBidG5DbG9zZS5mb3JFYWNoKGNsb3NlID0+IHtcclxuICAgICAgICAgICAgY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gZS50YXJnZXQuY2xvc2VzdCgnLm1vZGFsJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZU1vZGFsKG1vZGFsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZE1vZGFsRXZlbnRMaXN0ZW5lcnMobW9kYWwpIHtcclxuICAgICAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uTW9kYWxLZXlEb3duKTtcclxuICAgICAgICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbk1vZGFsQ2xpY2spO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTW9kYWxFdmVudExpc3RlbmVycyhtb2RhbCkge1xyXG4gICAgICAgICAgICBtb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25Nb2RhbEtleURvd24pO1xyXG4gICAgICAgICAgICBtb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uTW9kYWxDbGljayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjbG9zZU1vZGFsKG1vZGFsKSB7XHJcbiAgICAgICAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ21vZGFsLS1hY3RpdmUnKTtcclxuICAgICAgICAgICAgYm9keS5zdHlsZS5vdmVyZmxvd1kgPSAnJztcclxuICAgICAgICAgICAgcmVtb3ZlTW9kYWxFdmVudExpc3RlbmVycyhtb2RhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvbk1vZGFsS2V5RG93bihlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gZS5jdXJyZW50VGFyZ2V0O1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XHJcbiAgICAgICAgICAgICAgICBjbG9zZU1vZGFsKG1vZGFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb25Nb2RhbENsaWNrKGUpIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kYWxDb250ZW50ID0gZS5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY29udGVudCcpO1xyXG4gICAgICAgICAgICBpZiAoIW1vZGFsQ29udGVudC5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIGNsb3NlTW9kYWwoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGxldCBidXJnZXJCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnVyZ2VyJyk7XHJcbiAgICBsZXQgYnVyZ2VyTWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItYnVyZ2VyX19jb250ZW50Jyk7XHJcblxyXG4gICAgYnVyZ2VyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGJ1cmdlck1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICBjb25zdCBtYXJxdWVlRWxlbWVudHNEaXNwbGF5ZWQgPSBnZXRDb21wdXRlZFN0eWxlKHJvb3QpLmdldFByb3BlcnR5VmFsdWUoXCItLW1hcnF1ZWUtZWxlbWVudHMtZGlzcGxheWVkXCIpO1xyXG4gICAgY29uc3QgbWFycXVlZUNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxvZ29zX19zdHJva2VcIik7XHJcbiAgICBtYXJxdWVlQ29udGVudC5mb3JFYWNoKChtYXJxdWVlKSA9PiB7XHJcbiAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tbWFycXVlZS1lbGVtZW50c1wiLCBtYXJxdWVlLmNoaWxkcmVuLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXJxdWVlRWxlbWVudHNEaXNwbGF5ZWQ7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBpZiAobWFycXVlZS5jbGFzc0xpc3QuY29udGFpbnMoJ2xvZ29zX19zdHJva2UtLXJldmVyc2UnKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgbWFycXVlZS5wcmVwZW5kKG1hcnF1ZWUuY2hpbGRyZW5baV0uY2xvbmVOb2RlKHRydWUpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1hcnF1ZWUuYXBwZW5kQ2hpbGQobWFycXVlZS5jaGlsZHJlbltpXS5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICB2YXIgZmFxID0gbmV3IFN3aXBlcignLmZhcV9fc3dpcGVyJywge1xyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgbmV4dEVsOiAnLmZhcV9faGVhZGVyIC5zd2lwZXItYnV0dG9uLW5leHQnLFxyXG4gICAgICAgICAgICBwcmV2RWw6ICcuZmFxX19oZWFkZXIgLnN3aXBlci1idXR0b24tcHJldicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAzMjA6IHtcclxuICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjAsXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICA2NDA6IHtcclxuICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogNDAsXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gbG9vcDogdHJ1ZVxyXG5cclxuICAgICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIG5ldyBXT1coKS5pbml0KCk7XHJcbn0pXHJcblxyXG4iXX0=
